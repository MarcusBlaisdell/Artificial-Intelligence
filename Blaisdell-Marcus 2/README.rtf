{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 README.txt\
\
Marcus Blaisdell\
Homework #2\
Wumpus world autonomous agent using only if-then-else.\
\
This Agent.cc file uses if-then-else statements to try to achieve the best possible score in a partially observable world. \
\
I used variables to track the players position throughout the map combined with several area-specific conditions to determine an approximation of the best move.\
The variables are data members of the Agent class.\
They are initialized when the Agent class is created by the initialization function.\
\
The conditionals are highly position sensitive and dependent on short-circuit evaluation. \
\
The agent was tested on twenty maps. It is not optimal for every map because of the unknown position of the gold but is a reasonable approximation.\
\
Once the gold is obtained, adequate information has been obtained by the agent to devise a nearly optimal to optimal return trip and so I have added a critic element that evaluates the difference between the number of moves required to obtain the gold and the number of moves to return to the cave entrance and provide that feedback that could be later incorporated into a learning element to improve the agent performance. \
\
Adding a random element to the agent to determine whether to begin the search for gold at row three or row four could improve performance while increasing the complexity of the conditional statements. In its current state, the rules were added one at a time while testing each map to guarantee that the agent was able to complete them all with a close to optimal score and several times during the development, adding a new rule required the modification of one or more existing rules. Adding the random element would have required the addition and modifications of more rules that would result in an overall algorithm that is able to perform well on this one specific constraint and would not generalize or scale up well to new maps which is something that we should target in our algorithm development. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 The Agent class does not create any additional classes and so the C++ default constructor is adequate.\
\
The Agent class does not dynamically allocate memory and so the C++ default destructor is adequate. \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
}